import os
import logging
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import mm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ACTION, ADDING_CLIENT, ADDING_ITEMS, ADDING_ITEM_NAME, ADDING_ITEM_QTY, ADDING_ITEM_PRICE, ADDING_ITEM_DISCOUNT, SETTING_GENERAL_DISCOUNT = range(8)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
orders_db = {}
current_order = {}

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®!
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8465090691:AAGx-sekLkXf4Si14wVeU09rWWrXiOS92KI')

def number_to_words_ru(num):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –≤ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    ones = ['', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å']
    tens = ['', '', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ']
    hundreds = ['', '—Å—Ç–æ', '–¥–≤–µ—Å—Ç–∏', '—Ç—Ä–∏—Å—Ç–∞', '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞', '–ø—è—Ç—å—Å–æ—Ç', '—à–µ—Å—Ç—å—Å–æ—Ç', '—Å–µ–º—å—Å–æ—Ç', '–≤–æ—Å–µ–º—å—Å–æ—Ç', '–¥–µ–≤—è—Ç—å—Å–æ—Ç']
    teens = ['–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å']
    thousands = ['—Ç—ã—Å—è—á–∞', '—Ç—ã—Å—è—á–∏', '—Ç—ã—Å—è—á']
    
    if num == 0:
        return '–Ω–æ–ª—å —Ä—É–±–ª–µ–π'
    
    int_part = int(num)
    result = ''
    
    if int_part >= 1000:
        th = int_part // 1000
        th_mod = th % 10
        th_mod100 = th % 100
        
        if th >= 100:
            result += hundreds[th // 100] + ' '
        if th_mod100 >= 10 and th_mod100 < 20:
            result += teens[th_mod100 - 10] + ' '
        else:
            if (th % 100) // 10 > 0:
                result += tens[(th % 100) // 10] + ' '
            if th_mod > 0:
                fem_ones = ['', '–æ–¥–Ω–∞', '–¥–≤–µ', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å']
                result += fem_ones[th_mod] + ' '
        
        if th_mod100 >= 10 and th_mod100 <= 20:
            result += thousands[2] + ' '
        elif th_mod == 1:
            result += thousands[0] + ' '
        elif th_mod >= 2 and th_mod <= 4:
            result += thousands[1] + ' '
        else:
            result += thousands[2] + ' '
    
    remainder = int_part % 1000
    if remainder >= 100:
        result += hundreds[remainder // 100] + ' '
    last_two = remainder % 100
    if last_two >= 10 and last_two < 20:
        result += teens[last_two - 10] + ' '
    else:
        if last_two // 10 > 0:
            result += tens[last_two // 10] + ' '
        if last_two % 10 > 0:
            result += ones[last_two % 10] + ' '
    
    last_digit = int_part % 10
    last_two_digits = int_part % 100
    
    if last_two_digits >= 11 and last_two_digits <= 14:
        result += '—Ä—É–±–ª–µ–π'
    elif last_digit == 1:
        result += '—Ä—É–±–ª—å'
    elif last_digit >= 2 and last_digit <= 4:
        result += '—Ä—É–±–ª—è'
    else:
        result += '—Ä—É–±–ª–µ–π'
    
    kopeks = round((num - int_part) * 100)
    result += f' {kopeks:02d} –∫–æ–ø–µ–µ–∫'
    
    return result.strip().capitalize()

def calculate_order_total(order):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞"""
    subtotal = 0
    for item in order.get('items', []):
        item_total = item['quantity'] * item['price']
        item_total -= item_total * item.get('discount', 0) / 100
        subtotal += item_total
    
    general_discount = order.get('general_discount', 0)
    total = subtotal - (subtotal * general_discount / 100)
    return subtotal, total

def generate_pdf(order):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞"""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=30, leftMargin=30, topMargin=30, bottomMargin=18)
    
    elements = []
    styles = getSampleStyleSheet()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title_style = ParagraphStyle('CustomTitle', parent=styles['Heading1'], fontSize=16, alignment=1)
    date_str = datetime.fromisoformat(order['date']).strftime('%d.%m.%Y')
    title = Paragraph(f"<b>–ó–∞–∫–∞–∑ –æ—Ç {date_str}</b>", title_style)
    elements.append(title)
    elements.append(Spacer(1, 12))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
    info_style = ParagraphStyle('Info', parent=styles['Normal'], fontSize=11)
    elements.append(Paragraph(f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {order['executor']}", info_style))
    elements.append(Paragraph(f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {order['client_name']}, —Ç–µ–ª.: {order['client_phone']}", info_style))
    elements.append(Spacer(1, 12))
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    has_discounts = order.get('general_discount', 0) > 0 or any(item.get('discount', 0) > 0 for item in order['items'])
    
    if has_discounts:
        table_data = [['‚Ññ', '–¢–æ–≤–∞—Ä—ã (—Ä–∞–±–æ—Ç—ã, —É—Å–ª—É–≥–∏)', '–ö–æ–ª-–≤–æ', '–¶–µ–Ω–∞', '–°–∫–∏–¥–∫–∞', '–°—É–º–º–∞']]
    else:
        table_data = [['‚Ññ', '–¢–æ–≤–∞—Ä—ã (—Ä–∞–±–æ—Ç—ã, —É—Å–ª—É–≥–∏)', '–ö–æ–ª-–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞']]
    
    for idx, item in enumerate(order['items'], 1):
        item_subtotal = item['quantity'] * item['price']
        item_total = item_subtotal - (item_subtotal * item.get('discount', 0) / 100)
        
        if has_discounts:
            discount_str = f"{item.get('discount', 0)}%" if item.get('discount', 0) > 0 else '-'
            table_data.append([
                str(idx),
                item['name'],
                str(item['quantity']),
                f"{item['price']:.2f}",
                discount_str,
                f"{item_total:.2f}"
            ])
        else:
            table_data.append([
                str(idx),
                item['name'],
                str(item['quantity']),
                f"{item['price']:.2f}",
                f"{item_total:.2f}"
            ])
    
    if has_discounts:
        col_widths = [30, 200, 50, 70, 60, 70]
    else:
        col_widths = [30, 250, 50, 70, 70]
    
    table = Table(table_data, colWidths=col_widths)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ALIGN', (1, 1), (1, -1), 'LEFT'),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 12))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
    subtotal, total = calculate_order_total(order)
    
    if order.get('general_discount', 0) > 0:
        elements.append(Paragraph(f"<b>–°—É–º–º–∞:</b> {subtotal:.2f} —Ä—É–±.", info_style))
        elements.append(Paragraph(f"<b>–û–±—â–∞—è —Å–∫–∏–¥–∫–∞:</b> {order['general_discount']}%", info_style))
        elements.append(Paragraph(f"<b>–ò—Ç–æ–≥–æ —Å–æ —Å–∫–∏–¥–∫–æ–π:</b> {total:.2f} —Ä—É–±.", info_style))
    else:
        elements.append(Paragraph(f"<b>–ò—Ç–æ–≥–æ:</b> {total:.2f} —Ä—É–±.", info_style))
    
    elements.append(Spacer(1, 12))
    elements.append(Paragraph(f"–í—Å–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π {len(order['items'])}, –Ω–∞ —Å—É–º–º—É {total:.2f} —Ä—É–±.", info_style))
    elements.append(Paragraph(f"<b>{number_to_words_ru(total)}</b>", info_style))
    
    doc.build(elements)
    buffer.seek(0)
    return buffer

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='new_order')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='list_orders')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return CHOOSING_ACTION

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == 'new_order':
        current_order[user_id] = {
            'date': datetime.now().isoformat(),
            'executor': '–ñ–∏—Ä–Ω–æ–≤ –ê.–°.',
            'items': [],
            'general_discount': 0
        }
        await query.edit_message_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:"
        )
        return ADDING_CLIENT
    
    elif query.data == 'list_orders':
        user_orders = orders_db.get(user_id, {})
        if not user_orders:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!",
                reply_markup=reply_markup
            )
            return CHOOSING_ACTION
        
        message = "üìã *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
        keyboard = []
        for order_id, order in user_orders.items():
            date_str = datetime.fromisoformat(order['date']).strftime('%d.%m.%Y')
            _, total = calculate_order_total(order)
            message += f"‚Ä¢ {order['client_name']} - {date_str} - {total:.2f}‚ÇΩ\n"
            keyboard.append([InlineKeyboardButton(
                f"üìÑ {order['client_name']} ({date_str})",
                callback_data=f'view_order_{order_id}'
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        return CHOOSING_ACTION
    
    elif query.data.startswith('view_order_'):
        order_id = query.data.replace('view_order_', '')
        order = orders_db[user_id][order_id]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_buffer = generate_pdf(order)
        
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=pdf_buffer,
            filename=f"–ó–∞–∫–∞–∑_{order['client_name']}.pdf",
            caption=f"üìÑ –ó–∞–∫–∞–∑ –¥–ª—è {order['client_name']}"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data='list_orders')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!", reply_markup=reply_markup)
        return CHOOSING_ACTION
    
    elif query.data == 'help':
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ÑπÔ∏è *–ü–æ–º–æ—â—å*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏.\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
            "*–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:*\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏\n"
            "4. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏\n"
            "5. –ü–æ–ª—É—á–∏—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return CHOOSING_ACTION
    
    elif query.data == 'back_to_menu':
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='new_order')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='list_orders')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return CHOOSING_ACTION
    
    elif query.data == 'add_item':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏:")
        return ADDING_ITEM_NAME
    
    elif query.data == 'finish_order':
        user_id = query.from_user.id
        order = current_order[user_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        if user_id not in orders_db:
            orders_db[user_id] = {}
        
        order_id = f"order_{len(orders_db[user_id]) + 1}"
        orders_db[user_id][order_id] = order
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_buffer = generate_pdf(order)
        
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=pdf_buffer,
            filename=f"–ó–∞–∫–∞–∑_{order['client_name']}.pdf",
            caption=f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è {order['client_name']}"
        )
        
        del current_order[user_id]
        
        keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
        return CHOOSING_ACTION
    
    elif query.data == 'set_general_discount':
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å–∫–∏–¥–∫—É –Ω–∞ –≤–µ—Å—å –∑–∞–∫–∞–∑ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0 –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∏ –Ω–µ—Ç."
        )
        return SETTING_GENERAL_DISCOUNT

async def receive_client_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑—á–∏–∫–µ"""
    user_id = update.message.from_user.id
    text = update.message.text
    
    if 'client_name' not in current_order[user_id]:
        current_order[user_id]['client_name'] = text
        await update.message.reply_text(
            f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫: {text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        )
        return ADDING_CLIENT
    else:
        current_order[user_id]['client_phone'] = text
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É", callback_data='add_item')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫: {current_order[user_id]['client_name']}\n"
            f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {text}\n\n"
            "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏:",
            reply_markup=reply_markup
        )
        return ADDING_ITEMS

async def receive_item_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    user_id = update.message.from_user.id
    context.user_data['temp_item'] = {'name': update.message.text}
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {update.message.text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    )
    return ADDING_ITEM_QTY

async def receive_item_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        quantity = float(update.message.text)
        if quantity <= 0:
            raise ValueError
        
        context.user_data['temp_item']['quantity'] = quantity
        await update.message.reply_text(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (–≤ —Ä—É–±–ª—è—Ö):"
        )
        return ADDING_ITEM_PRICE
    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:"
        )
        return ADDING_ITEM_QTY

async def receive_item_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = float(update.message.text)
        if price < 0:
            raise ValueError
        
        context.user_data['temp_item']['price'] = price
        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0 –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∏ –Ω–µ—Ç."
        )
        return ADDING_ITEM_DISCOUNT
    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—á–∏—Å–ª–æ):"
        )
        return ADDING_ITEM_PRICE

async def receive_item_discount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"""
    try:
        discount = float(update.message.text)
        if discount < 0 or discount > 100:
            raise ValueError
        
        user_id = update.message.from_user.id
        context.user_data['temp_item']['discount'] = discount
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑
        current_order[user_id]['items'].append(context.user_data['temp_item'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∑–∞–∫–∞–∑–µ
        order = current_order[user_id]
        message = f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüìã *–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:*\n"
        message += f"–ó–∞–∫–∞–∑—á–∏–∫: {order['client_name']}\n"
        message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['client_phone']}\n\n"
        message += "*–¢–æ–≤–∞—Ä—ã:*\n"
        
        for idx, item in enumerate(order['items'], 1):
            item_total = item['quantity'] * item['price']
            if item['discount'] > 0:
                item_total -= item_total * item['discount'] / 100
                message += f"{idx}. {item['name']} - {item['quantity']}—à—Ç √ó {item['price']}‚ÇΩ (—Å–∫–∏–¥–∫–∞ {item['discount']}%) = {item_total:.2f}‚ÇΩ\n"
            else:
                message += f"{idx}. {item['name']} - {item['quantity']}—à—Ç √ó {item['price']}‚ÇΩ = {item_total:.2f}‚ÇΩ\n"
        
        _, total = calculate_order_total(order)
        message += f"\n*–ò—Ç–æ–≥–æ: {total:.2f}‚ÇΩ*"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data='add_item')],
            [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Å–∫–∏–¥–∫—É", callback_data='set_general_discount')],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='finish_order')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        return ADDING_ITEMS
    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –æ—Ç 0 –¥–æ 100:"
        )
        return ADDING_ITEM_DISCOUNT

async def receive_general_discount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å–∫–∏–¥–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑"""
    try:
        discount = float(update.message.text)
        if discount < 0 or discount > 100:
            raise ValueError
        
        user_id = update.message.from_user.id
        current_order[user_id]['general_discount'] = discount
        
        order = current_order[user_id]
        subtotal, total = calculate_order_total(order)
        
        message = f"‚úÖ –û–±—â–∞—è —Å–∫–∏–¥–∫–∞ {discount}% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
        message += f"–°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {subtotal:.2f}‚ÇΩ\n"
        message += f"*–ò—Ç–æ–≥–æ —Å–æ —Å–∫–∏–¥–∫–æ–π: {total:.2f}‚ÇΩ*"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data='add_item')],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='finish_order')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        return ADDING_ITEMS
    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –æ—Ç 0 –¥–æ 100:"
        )
        return SETTING_GENERAL_DISCOUNT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    user_id = update.message.from_user.id
    if user_id in current_order:
        del current_order[user_id]
    
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='new_order')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='list_orders')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return CHOOSING_ACTION

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_ACTION: [CallbackQueryHandler(button_callback)],
            ADDING_CLIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_client_info)],
            ADDING_ITEMS: [CallbackQueryHandler(button_callback)],
            ADDING_ITEM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_item_name)],
            ADDING_ITEM_QTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_item_quantity)],
            ADDING_ITEM_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_item_price)],
            ADDING_ITEM_DISCOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_item_discount)],
            SETTING_GENERAL_DISCOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_general_discount)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
